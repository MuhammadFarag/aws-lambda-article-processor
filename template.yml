AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Inspect empty author

Resources:
  InspectEmptyAuthorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: article_processor.inspect_empty_author
      Runtime: python3.6
      CodeUri: .
  ContentLengthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: article_processor.content_length
      Runtime: python3.6
      CodeUri: .
  CapitalizeAuthorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: article_processor.capitalize_author_name
      Runtime: python3.6
      CodeUri: .
  PumpUpRatingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: article_processor.pump_priority
      Runtime: python3.6
      CodeUri: .

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  MyStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Article Processing State Machine",
              "StartAt": "InspectEmptyAuthor",
              "States": {
                "InspectEmptyAuthor": {
                  "Type": "Task",
                  "Resource": "${inspectEmptyAuthorFunctionArn}",
                  "Next": "ContentLength"
                },
                "ContentLength": {
                  "Type": "Task",
                  "Resource": "${contentLengthFunctionArn}",
                  "Next": "Paralleling"
                },
                "Paralleling": {
                  "Type": "Parallel",
                  "Branches": [
                    {
                      "StartAt": "CapitalizeAuthor",
                      "States": {
                        "CapitalizeAuthor": {
                          "Type": "Task",
                          "Resource": "${capitalizeAuthorFunctionArn}",
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "PumpUpRating",
                      "States": {
                        "PumpUpRating": {
                          "Type": "Task",
                          "Resource": "${pumpUpRatingFunctionArn}",
                          "End": true
                        }
                      }
                    }
                  ],
                  "End": true
                }
              }
            }
          - {inspectEmptyAuthorFunctionArn: !GetAtt [ InspectEmptyAuthorFunction, Arn ],
              contentLengthFunctionArn: !GetAtt [ ContentLengthFunction, Arn ],
              capitalizeAuthorFunctionArn: !GetAtt [ CapitalizeAuthorFunction, Arn ],
              pumpUpRatingFunctionArn: !GetAtt [ PumpUpRatingFunction, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]